// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tradegen extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Tradegen entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Tradegen entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Tradegen", id.toString(), this);
  }

  static load(id: string): Tradegen | null {
    return store.get("Tradegen", id) as Tradegen | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    return value.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get NFTPoolCount(): i32 {
    let value = this.get("NFTPoolCount");
    return value.toI32();
  }

  set NFTPoolCount(value: i32) {
    this.set("NFTPoolCount", Value.fromI32(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get performanceFee(): BigInt {
    let value = this.get("performanceFee");
    return value.toBigInt();
  }

  set performanceFee(value: BigInt) {
    this.set("performanceFee", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesCollected(): BigDecimal {
    let value = this.get("feesCollected");
    return value.toBigDecimal();
  }

  set feesCollected(value: BigDecimal) {
    this.set("feesCollected", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get positionAddresses(): Array<string> | null {
    let value = this.get("positionAddresses");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set positionAddresses(value: Array<string> | null) {
    if (value === null) {
      this.unset("positionAddresses");
    } else {
      this.set(
        "positionAddresses",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get positionBalances(): Array<BigInt> | null {
    let value = this.get("positionBalances");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set positionBalances(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("positionBalances");
    } else {
      this.set(
        "positionBalances",
        Value.fromBigIntArray(value as Array<BigInt>)
      );
    }
  }

  get poolDayData(): Array<string> {
    let value = this.get("poolDayData");
    return value.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set("poolDayData", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class NFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTPool", id.toString(), this);
  }

  static load(id: string): NFTPool | null {
    return store.get("NFTPool", id) as NFTPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    return value.toBigInt();
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }

  get seedPrice(): BigInt {
    let value = this.get("seedPrice");
    return value.toBigInt();
  }

  set seedPrice(value: BigInt) {
    this.set("seedPrice", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesCollected(): BigDecimal {
    let value = this.get("feesCollected");
    return value.toBigDecimal();
  }

  set feesCollected(value: BigDecimal) {
    this.set("feesCollected", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get positionAddresses(): Array<string> | null {
    let value = this.get("positionAddresses");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set positionAddresses(value: Array<string> | null) {
    if (value === null) {
      this.unset("positionAddresses");
    } else {
      this.set(
        "positionAddresses",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get positionBalances(): Array<BigInt> | null {
    let value = this.get("positionBalances");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set positionBalances(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("positionBalances");
    } else {
      this.set(
        "positionBalances",
        Value.fromBigIntArray(value as Array<BigInt>)
      );
    }
  }

  get poolDayData(): Array<string> {
    let value = this.get("poolDayData");
    return value.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set("poolDayData", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class PoolLookup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolLookup entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolLookup entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolLookup", id.toString(), this);
  }

  static load(id: string): PoolLookup | null {
    return store.get("PoolLookup", id) as PoolLookup | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }
}

export class NFTPoolLookup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTPoolLookup entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTPoolLookup entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTPoolLookup", id.toString(), this);
  }

  static load(id: string): NFTPoolLookup | null {
    return store.get("NFTPoolLookup", id) as NFTPoolLookup | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolPositions(): Array<string> {
    let value = this.get("poolPositions");
    return value.toStringArray();
  }

  set poolPositions(value: Array<string>) {
    this.set("poolPositions", Value.fromStringArray(value));
  }

  get NFTPoolPositions(): Array<string> {
    let value = this.get("NFTPoolPositions");
    return value.toStringArray();
  }

  set NFTPoolPositions(value: Array<string>) {
    this.set("NFTPoolPositions", Value.fromStringArray(value));
  }

  get managedInvestments(): Array<string> {
    let value = this.get("managedInvestments");
    return value.toStringArray();
  }

  set managedInvestments(value: Array<string>) {
    this.set("managedInvestments", Value.fromStringArray(value));
  }

  get feesEarned(): BigDecimal {
    let value = this.get("feesEarned");
    return value.toBigDecimal();
  }

  set feesEarned(value: BigDecimal) {
    this.set("feesEarned", Value.fromBigDecimal(value));
  }
}

export class PoolPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolPosition", id.toString(), this);
  }

  static load(id: string): PoolPosition | null {
    return store.get("PoolPosition", id) as PoolPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get USDValue(): BigInt {
    let value = this.get("USDValue");
    return value.toBigInt();
  }

  set USDValue(value: BigInt) {
    this.set("USDValue", Value.fromBigInt(value));
  }
}

export class NFTPoolPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTPoolPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTPoolPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTPoolPosition", id.toString(), this);
  }

  static load(id: string): NFTPoolPosition | null {
    return store.get("NFTPoolPosition", id) as NFTPoolPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get USDValue(): BigInt {
    let value = this.get("USDValue");
    return value.toBigInt();
  }

  set USDValue(value: BigInt) {
    this.set("USDValue", Value.fromBigInt(value));
  }
}

export class PoolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolTransaction", id.toString(), this);
  }

  static load(id: string): PoolTransaction | null {
    return store.get("PoolTransaction", id) as PoolTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get create(): string | null {
    let value = this.get("create");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set create(value: string | null) {
    if (value === null) {
      this.unset("create");
    } else {
      this.set("create", Value.fromString(value as string));
    }
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get withdraw(): string | null {
    let value = this.get("withdraw");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set withdraw(value: string | null) {
    if (value === null) {
      this.unset("withdraw");
    } else {
      this.set("withdraw", Value.fromString(value as string));
    }
  }

  get mintFee(): string | null {
    let value = this.get("mintFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mintFee(value: string | null) {
    if (value === null) {
      this.unset("mintFee");
    } else {
      this.set("mintFee", Value.fromString(value as string));
    }
  }
}

export class NFTPoolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTPoolTransaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTPoolTransaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTPoolTransaction", id.toString(), this);
  }

  static load(id: string): NFTPoolTransaction | null {
    return store.get("NFTPoolTransaction", id) as NFTPoolTransaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get create(): string | null {
    let value = this.get("create");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set create(value: string | null) {
    if (value === null) {
      this.unset("create");
    } else {
      this.set("create", Value.fromString(value as string));
    }
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (value === null) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(value as string));
    }
  }

  get withdraw(): string | null {
    let value = this.get("withdraw");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set withdraw(value: string | null) {
    if (value === null) {
      this.unset("withdraw");
    } else {
      this.set("withdraw", Value.fromString(value as string));
    }
  }
}

export class CreatePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreatePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreatePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreatePool", id.toString(), this);
  }

  static load(id: string): CreatePool | null {
    return store.get("CreatePool", id) as CreatePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get poolIndex(): BigInt {
    let value = this.get("poolIndex");
    return value.toBigInt();
  }

  set poolIndex(value: BigInt) {
    this.set("poolIndex", Value.fromBigInt(value));
  }
}

export class CreateNFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreateNFTPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreateNFTPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreateNFTPool", id.toString(), this);
  }

  static load(id: string): CreateNFTPool | null {
    return store.get("CreateNFTPool", id) as CreateNFTPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolTransaction(): string {
    let value = this.get("NFTPoolTransaction");
    return value.toString();
  }

  set NFTPoolTransaction(value: string) {
    this.set("NFTPoolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }

  get NFTPoolIndex(): BigInt {
    let value = this.get("NFTPoolIndex");
    return value.toBigInt();
  }

  set NFTPoolIndex(value: BigInt) {
    this.set("NFTPoolIndex", Value.fromBigInt(value));
  }

  get seedPrice(): BigInt {
    let value = this.get("seedPrice");
    return value.toBigInt();
  }

  set seedPrice(value: BigInt) {
    this.set("seedPrice", Value.fromBigInt(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    return value.toBigInt();
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }
}

export class DepositPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositPool", id.toString(), this);
  }

  static load(id: string): DepositPool | null {
    return store.get("DepositPool", id) as DepositPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class DepositNFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositNFTPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositNFTPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositNFTPool", id.toString(), this);
  }

  static load(id: string): DepositNFTPool | null {
    return store.get("DepositNFTPool", id) as DepositNFTPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolTransaction(): string {
    let value = this.get("NFTPoolTransaction");
    return value.toString();
  }

  set NFTPoolTransaction(value: string) {
    this.set("NFTPoolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get USDAmount(): BigInt {
    let value = this.get("USDAmount");
    return value.toBigInt();
  }

  set USDAmount(value: BigInt) {
    this.set("USDAmount", Value.fromBigInt(value));
  }
}

export class WithdrawPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WithdrawPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithdrawPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithdrawPool", id.toString(), this);
  }

  static load(id: string): WithdrawPool | null {
    return store.get("WithdrawPool", id) as WithdrawPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get USDAmount(): BigDecimal {
    let value = this.get("USDAmount");
    return value.toBigDecimal();
  }

  set USDAmount(value: BigDecimal) {
    this.set("USDAmount", Value.fromBigDecimal(value));
  }
}

export class WithdrawNFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WithdrawNFTPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithdrawNFTPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithdrawNFTPool", id.toString(), this);
  }

  static load(id: string): WithdrawNFTPool | null {
    return store.get("WithdrawNFTPool", id) as WithdrawNFTPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolTransaction(): string {
    let value = this.get("NFTPoolTransaction");
    return value.toString();
  }

  set NFTPoolTransaction(value: string) {
    this.set("NFTPoolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get USDAmount(): BigDecimal {
    let value = this.get("USDAmount");
    return value.toBigDecimal();
  }

  set USDAmount(value: BigDecimal) {
    this.set("USDAmount", Value.fromBigDecimal(value));
  }
}

export class MintFeePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintFeePool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintFeePool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintFeePool", id.toString(), this);
  }

  static load(id: string): MintFeePool | null {
    return store.get("MintFeePool", id) as MintFeePool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get managerAddress(): string {
    let value = this.get("managerAddress");
    return value.toString();
  }

  set managerAddress(value: string) {
    this.set("managerAddress", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get feesMinted(): BigInt {
    let value = this.get("feesMinted");
    return value.toBigInt();
  }

  set feesMinted(value: BigInt) {
    this.set("feesMinted", Value.fromBigInt(value));
  }
}

export class ManagedInvestment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ManagedInvestment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ManagedInvestment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ManagedInvestment", id.toString(), this);
  }

  static load(id: string): ManagedInvestment | null {
    return store.get("ManagedInvestment", id) as ManagedInvestment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get NFTPool(): string | null {
    let value = this.get("NFTPool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set NFTPool(value: string | null) {
    if (value === null) {
      this.unset("NFTPool");
    } else {
      this.set("NFTPool", Value.fromString(value as string));
    }
  }

  get manager(): string {
    let value = this.get("manager");
    return value.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }
}

export class TradegenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradegenDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradegenDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradegenDayData", id.toString(), this);
  }

  static load(id: string): TradegenDayData | null {
    return store.get("TradegenDayData", id) as TradegenDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolHourData", id.toString(), this);
  }

  static load(id: string): PoolHourData | null {
    return store.get("PoolHourData", id) as PoolHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    return value.toBigDecimal();
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyTxns(): BigInt {
    let value = this.get("hourlyTxns");
    return value.toBigInt();
  }

  set hourlyTxns(value: BigInt) {
    this.set("hourlyTxns", Value.fromBigInt(value));
  }
}

export class NFTPoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTPoolHourData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTPoolHourData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTPoolHourData", id.toString(), this);
  }

  static load(id: string): NFTPoolHourData | null {
    return store.get("NFTPoolHourData", id) as NFTPoolHourData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    return value.toBigDecimal();
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyTxns(): BigInt {
    let value = this.get("hourlyTxns");
    return value.toBigInt();
  }

  set hourlyTxns(value: BigInt) {
    this.set("hourlyTxns", Value.fromBigInt(value));
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolDayData", id.toString(), this);
  }

  static load(id: string): PoolDayData | null {
    return store.get("PoolDayData", id) as PoolDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get priceUSD(): BigInt {
    let value = this.get("priceUSD");
    return value.toBigInt();
  }

  set priceUSD(value: BigInt) {
    this.set("priceUSD", Value.fromBigInt(value));
  }
}

export class NFTPoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTPoolDayData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTPoolDayData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTPoolDayData", id.toString(), this);
  }

  static load(id: string): NFTPoolDayData | null {
    return store.get("NFTPoolDayData", id) as NFTPoolDayData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get priceUSD(): BigInt {
    let value = this.get("priceUSD");
    return value.toBigInt();
  }

  set priceUSD(value: BigInt) {
    this.set("priceUSD", Value.fromBigInt(value));
  }
}
