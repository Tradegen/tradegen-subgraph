// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Tradegen extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolCount", Value.fromI32(0));
    this.set("NFTPoolCount", Value.fromI32(0));
    this.set("totalVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tradegen entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tradegen entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tradegen", id.toString(), this);
    }
  }

  static load(id: string): Tradegen | null {
    return changetype<Tradegen | null>(store.get("Tradegen", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount");
    return value!.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get NFTPoolCount(): i32 {
    let value = this.get("NFTPoolCount");
    return value!.toI32();
  }

  set NFTPoolCount(value: i32) {
    this.set("NFTPoolCount", Value.fromI32(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("manager", Value.fromString(""));
    this.set("performanceFee", Value.fromBigInt(BigInt.zero()));
    this.set("tokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("tradeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesCollected", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Pool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Pool", id.toString(), this);
    }
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get("Pool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get performanceFee(): BigInt {
    let value = this.get("performanceFee");
    return value!.toBigInt();
  }

  set performanceFee(value: BigInt) {
    this.set("performanceFee", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value!.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value!.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesCollected(): BigInt {
    let value = this.get("feesCollected");
    return value!.toBigInt();
  }

  set feesCollected(value: BigInt) {
    this.set("feesCollected", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get poolDayData(): Array<string> {
    let value = this.get("poolDayData");
    return value!.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set("poolDayData", Value.fromStringArray(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get trades(): Array<string> {
    let value = this.get("trades");
    return value!.toStringArray();
  }

  set trades(value: Array<string>) {
    this.set("trades", Value.fromStringArray(value));
  }
}

export class NFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("manager", Value.fromString(""));
    this.set("maxSupply", Value.fromBigInt(BigInt.zero()));
    this.set("seedPrice", Value.fromBigInt(BigInt.zero()));
    this.set("tokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("availableC1", Value.fromBigInt(BigInt.zero()));
    this.set("availableC2", Value.fromBigInt(BigInt.zero()));
    this.set("availableC3", Value.fromBigInt(BigInt.zero()));
    this.set("availableC4", Value.fromBigInt(BigInt.zero()));
    this.set("tradeVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesCollected", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPool", id.toString(), this);
    }
  }

  static load(id: string): NFTPool | null {
    return changetype<NFTPool | null>(store.get("NFTPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    return value!.toBigInt();
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }

  get seedPrice(): BigInt {
    let value = this.get("seedPrice");
    return value!.toBigInt();
  }

  set seedPrice(value: BigInt) {
    this.set("seedPrice", Value.fromBigInt(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value!.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get availableC1(): BigInt {
    let value = this.get("availableC1");
    return value!.toBigInt();
  }

  set availableC1(value: BigInt) {
    this.set("availableC1", Value.fromBigInt(value));
  }

  get availableC2(): BigInt {
    let value = this.get("availableC2");
    return value!.toBigInt();
  }

  set availableC2(value: BigInt) {
    this.set("availableC2", Value.fromBigInt(value));
  }

  get availableC3(): BigInt {
    let value = this.get("availableC3");
    return value!.toBigInt();
  }

  set availableC3(value: BigInt) {
    this.set("availableC3", Value.fromBigInt(value));
  }

  get availableC4(): BigInt {
    let value = this.get("availableC4");
    return value!.toBigInt();
  }

  set availableC4(value: BigInt) {
    this.set("availableC4", Value.fromBigInt(value));
  }

  get tradeVolumeUSD(): BigDecimal {
    let value = this.get("tradeVolumeUSD");
    return value!.toBigDecimal();
  }

  set tradeVolumeUSD(value: BigDecimal) {
    this.set("tradeVolumeUSD", Value.fromBigDecimal(value));
  }

  get feesCollected(): BigInt {
    let value = this.get("feesCollected");
    return value!.toBigInt();
  }

  set feesCollected(value: BigInt) {
    this.set("feesCollected", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get poolDayData(): Array<string> {
    let value = this.get("poolDayData");
    return value!.toStringArray();
  }

  set poolDayData(value: Array<string>) {
    this.set("poolDayData", Value.fromStringArray(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get trades(): Array<string> {
    let value = this.get("trades");
    return value!.toStringArray();
  }

  set trades(value: Array<string>) {
    this.set("trades", Value.fromStringArray(value));
  }
}

export class PoolLookup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolAddress", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolLookup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolLookup entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolLookup", id.toString(), this);
    }
  }

  static load(id: string): PoolLookup | null {
    return changetype<PoolLookup | null>(store.get("PoolLookup", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value!.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }
}

export class NFTPoolLookup extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("NFTPoolAddress", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTPoolLookup entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPoolLookup entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPoolLookup", id.toString(), this);
    }
  }

  static load(id: string): NFTPoolLookup | null {
    return changetype<NFTPoolLookup | null>(store.get("NFTPoolLookup", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value!.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("feesEarned", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("feesPaid", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolPositions(): Array<string> | null {
    let value = this.get("poolPositions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set poolPositions(value: Array<string> | null) {
    if (!value) {
      this.unset("poolPositions");
    } else {
      this.set("poolPositions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get NFTPoolPositions(): Array<string> | null {
    let value = this.get("NFTPoolPositions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set NFTPoolPositions(value: Array<string> | null) {
    if (!value) {
      this.unset("NFTPoolPositions");
    } else {
      this.set("NFTPoolPositions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get managedInvestments(): Array<string> | null {
    let value = this.get("managedInvestments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set managedInvestments(value: Array<string> | null) {
    if (!value) {
      this.unset("managedInvestments");
    } else {
      this.set(
        "managedInvestments",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get feesEarned(): BigDecimal {
    let value = this.get("feesEarned");
    return value!.toBigDecimal();
  }

  set feesEarned(value: BigDecimal) {
    this.set("feesEarned", Value.fromBigDecimal(value));
  }

  get feesPaid(): BigDecimal {
    let value = this.get("feesPaid");
    return value!.toBigDecimal();
  }

  set feesPaid(value: BigDecimal) {
    this.set("feesPaid", Value.fromBigDecimal(value));
  }
}

export class PoolPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("tokenBalance", Value.fromBigInt(BigInt.zero()));
    this.set("averagePrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolPosition", id.toString(), this);
    }
  }

  static load(id: string): PoolPosition | null {
    return changetype<PoolPosition | null>(store.get("PoolPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value!.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }
}

export class NFTPoolPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromString(""));
    this.set("NFTPool", Value.fromString(""));
    this.set("tokenBalance", Value.fromBigInt(BigInt.zero()));
    this.set("averagePrice", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTPoolPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPoolPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPoolPosition", id.toString(), this);
    }
  }

  static load(id: string): NFTPoolPosition | null {
    return changetype<NFTPoolPosition | null>(store.get("NFTPoolPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value!.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value!.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }
}

export class AssetPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenAddress", Value.fromString(""));
    this.set("tokenBalance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssetPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AssetPosition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AssetPosition", id.toString(), this);
    }
  }

  static load(id: string): AssetPosition | null {
    return changetype<AssetPosition | null>(store.get("AssetPosition", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }

  get NFTPool(): string | null {
    let value = this.get("NFTPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set NFTPool(value: string | null) {
    if (!value) {
      this.unset("NFTPool");
    } else {
      this.set("NFTPool", Value.fromString(<string>value));
    }
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    return value!.toString();
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get tokenBalance(): BigDecimal {
    let value = this.get("tokenBalance");
    return value!.toBigDecimal();
  }

  set tokenBalance(value: BigDecimal) {
    this.set("tokenBalance", Value.fromBigDecimal(value));
  }
}

export class PoolPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolPosition", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("block", Value.fromI32(0));
    this.set("user", Value.fromString(""));
    this.set("pool", Value.fromString(""));
    this.set("tokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("tokenBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolPositionSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolPositionSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolPositionSnapshot", id.toString(), this);
    }
  }

  static load(id: string): PoolPositionSnapshot | null {
    return changetype<PoolPositionSnapshot | null>(
      store.get("PoolPositionSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolPosition(): string {
    let value = this.get("poolPosition");
    return value!.toString();
  }

  set poolPosition(value: string) {
    this.set("poolPosition", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get block(): i32 {
    let value = this.get("block");
    return value!.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value!.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }
}

export class NFTPoolPositionSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("NFTPoolPosition", Value.fromString(""));
    this.set("timestamp", Value.fromI32(0));
    this.set("block", Value.fromI32(0));
    this.set("user", Value.fromString(""));
    this.set("NFTPool", Value.fromString(""));
    this.set("tokenPrice", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigInt(BigInt.zero()));
    this.set("tokenBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NFTPoolPositionSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPoolPositionSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPoolPositionSnapshot", id.toString(), this);
    }
  }

  static load(id: string): NFTPoolPositionSnapshot | null {
    return changetype<NFTPoolPositionSnapshot | null>(
      store.get("NFTPoolPositionSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolPosition(): string {
    let value = this.get("NFTPoolPosition");
    return value!.toString();
  }

  set NFTPoolPosition(value: string) {
    this.set("NFTPoolPosition", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get block(): i32 {
    let value = this.get("block");
    return value!.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value!.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    return value!.toBigInt();
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trade entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (!value) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(<string>value));
    }
  }

  get NFTPool(): string | null {
    let value = this.get("NFTPool");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set NFTPool(value: string | null) {
    if (!value) {
      this.unset("NFTPool");
    } else {
      this.set("NFTPool", Value.fromString(<string>value));
    }
  }

  get swap(): Array<string> | null {
    let value = this.get("swap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swap(value: Array<string> | null) {
    if (!value) {
      this.unset("swap");
    } else {
      this.set("swap", Value.fromStringArray(<Array<string>>value));
    }
  }

  get addLiquiditys(): Array<string> | null {
    let value = this.get("addLiquiditys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set addLiquiditys(value: Array<string> | null) {
    if (!value) {
      this.unset("addLiquiditys");
    } else {
      this.set("addLiquiditys", Value.fromStringArray(<Array<string>>value));
    }
  }

  get removeLiquiditys(): Array<string> | null {
    let value = this.get("removeLiquiditys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set removeLiquiditys(value: Array<string> | null) {
    if (!value) {
      this.unset("removeLiquiditys");
    } else {
      this.set("removeLiquiditys", Value.fromStringArray(<Array<string>>value));
    }
  }

  get stakes(): Array<string> | null {
    let value = this.get("stakes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakes(value: Array<string> | null) {
    if (!value) {
      this.unset("stakes");
    } else {
      this.set("stakes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get unstakes(): Array<string> | null {
    let value = this.get("unstakes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set unstakes(value: Array<string> | null) {
    if (!value) {
      this.unset("unstakes");
    } else {
      this.set("unstakes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("trade", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("investmentAddress", Value.fromString(""));
    this.set("fromAsset", Value.fromString(""));
    this.set("toAsset", Value.fromString(""));
    this.set("amountSwapped", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Swap entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Swap", id.toString(), this);
    }
  }

  static load(id: string): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get investmentAddress(): string {
    let value = this.get("investmentAddress");
    return value!.toString();
  }

  set investmentAddress(value: string) {
    this.set("investmentAddress", Value.fromString(value));
  }

  get fromAsset(): string {
    let value = this.get("fromAsset");
    return value!.toString();
  }

  set fromAsset(value: string) {
    this.set("fromAsset", Value.fromString(value));
  }

  get toAsset(): string {
    let value = this.get("toAsset");
    return value!.toString();
  }

  set toAsset(value: string) {
    this.set("toAsset", Value.fromString(value));
  }

  get amountSwapped(): BigInt {
    let value = this.get("amountSwapped");
    return value!.toBigInt();
  }

  set amountSwapped(value: BigInt) {
    this.set("amountSwapped", Value.fromBigInt(value));
  }
}

export class AddLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("trade", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("investmentAddress", Value.fromString(""));
    this.set("tokenA", Value.fromString(""));
    this.set("tokenB", Value.fromString(""));
    this.set("amountA", Value.fromBigInt(BigInt.zero()));
    this.set("amountB", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AddLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AddLiquidity", id.toString(), this);
    }
  }

  static load(id: string): AddLiquidity | null {
    return changetype<AddLiquidity | null>(store.get("AddLiquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get investmentAddress(): string {
    let value = this.get("investmentAddress");
    return value!.toString();
  }

  set investmentAddress(value: string) {
    this.set("investmentAddress", Value.fromString(value));
  }

  get tokenA(): string {
    let value = this.get("tokenA");
    return value!.toString();
  }

  set tokenA(value: string) {
    this.set("tokenA", Value.fromString(value));
  }

  get tokenB(): string {
    let value = this.get("tokenB");
    return value!.toString();
  }

  set tokenB(value: string) {
    this.set("tokenB", Value.fromString(value));
  }

  get amountA(): BigInt {
    let value = this.get("amountA");
    return value!.toBigInt();
  }

  set amountA(value: BigInt) {
    this.set("amountA", Value.fromBigInt(value));
  }

  get amountB(): BigInt {
    let value = this.get("amountB");
    return value!.toBigInt();
  }

  set amountB(value: BigInt) {
    this.set("amountB", Value.fromBigInt(value));
  }
}

export class RemoveLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("trade", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("investmentAddress", Value.fromString(""));
    this.set("tokenA", Value.fromString(""));
    this.set("tokenB", Value.fromString(""));
    this.set("numberOfLPTokens", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save RemoveLiquidity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("RemoveLiquidity", id.toString(), this);
    }
  }

  static load(id: string): RemoveLiquidity | null {
    return changetype<RemoveLiquidity | null>(store.get("RemoveLiquidity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get investmentAddress(): string {
    let value = this.get("investmentAddress");
    return value!.toString();
  }

  set investmentAddress(value: string) {
    this.set("investmentAddress", Value.fromString(value));
  }

  get tokenA(): string {
    let value = this.get("tokenA");
    return value!.toString();
  }

  set tokenA(value: string) {
    this.set("tokenA", Value.fromString(value));
  }

  get tokenB(): string {
    let value = this.get("tokenB");
    return value!.toString();
  }

  set tokenB(value: string) {
    this.set("tokenB", Value.fromString(value));
  }

  get numberOfLPTokens(): BigInt {
    let value = this.get("numberOfLPTokens");
    return value!.toBigInt();
  }

  set numberOfLPTokens(value: BigInt) {
    this.set("numberOfLPTokens", Value.fromBigInt(value));
  }
}

export class Stake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("trade", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("investmentAddress", Value.fromString(""));
    this.set("stakedToken", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Stake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Stake", id.toString(), this);
    }
  }

  static load(id: string): Stake | null {
    return changetype<Stake | null>(store.get("Stake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get investmentAddress(): string {
    let value = this.get("investmentAddress");
    return value!.toString();
  }

  set investmentAddress(value: string) {
    this.set("investmentAddress", Value.fromString(value));
  }

  get stakedToken(): string {
    let value = this.get("stakedToken");
    return value!.toString();
  }

  set stakedToken(value: string) {
    this.set("stakedToken", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Unstake extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("trade", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("investmentAddress", Value.fromString(""));
    this.set("stakedToken", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unstake entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Unstake entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Unstake", id.toString(), this);
    }
  }

  static load(id: string): Unstake | null {
    return changetype<Unstake | null>(store.get("Unstake", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trade(): string {
    let value = this.get("trade");
    return value!.toString();
  }

  set trade(value: string) {
    this.set("trade", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get investmentAddress(): string {
    let value = this.get("investmentAddress");
    return value!.toString();
  }

  set investmentAddress(value: string) {
    this.set("investmentAddress", Value.fromString(value));
  }

  get stakedToken(): string {
    let value = this.get("stakedToken");
    return value!.toString();
  }

  set stakedToken(value: string) {
    this.set("stakedToken", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get poolTransactions(): Array<string> | null {
    let value = this.get("poolTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set poolTransactions(value: Array<string> | null) {
    if (!value) {
      this.unset("poolTransactions");
    } else {
      this.set("poolTransactions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get NFTPoolTransactions(): Array<string> | null {
    let value = this.get("NFTPoolTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set NFTPoolTransactions(value: Array<string> | null) {
    if (!value) {
      this.unset("NFTPoolTransactions");
    } else {
      this.set(
        "NFTPoolTransactions",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class PoolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolTransaction", id.toString(), this);
    }
  }

  static load(id: string): PoolTransaction | null {
    return changetype<PoolTransaction | null>(store.get("PoolTransaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get creates(): Array<string> | null {
    let value = this.get("creates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set creates(value: Array<string> | null) {
    if (!value) {
      this.unset("creates");
    } else {
      this.set("creates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get invests(): Array<string> | null {
    let value = this.get("invests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set invests(value: Array<string> | null) {
    if (!value) {
      this.unset("invests");
    } else {
      this.set("invests", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdraws(): Array<string> | null {
    let value = this.get("withdraws");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdraws(value: Array<string> | null) {
    if (!value) {
      this.unset("withdraws");
    } else {
      this.set("withdraws", Value.fromStringArray(<Array<string>>value));
    }
  }

  get mintFees(): Array<string> | null {
    let value = this.get("mintFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mintFees(value: Array<string> | null) {
    if (!value) {
      this.unset("mintFees");
    } else {
      this.set("mintFees", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class NFTPoolTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("transaction", Value.fromString(""));
    this.set("pool", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTPoolTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPoolTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPoolTransaction", id.toString(), this);
    }
  }

  static load(id: string): NFTPoolTransaction | null {
    return changetype<NFTPoolTransaction | null>(
      store.get("NFTPoolTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value!.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get creates(): Array<string> | null {
    let value = this.get("creates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set creates(value: Array<string> | null) {
    if (!value) {
      this.unset("creates");
    } else {
      this.set("creates", Value.fromStringArray(<Array<string>>value));
    }
  }

  get invests(): Array<string> | null {
    let value = this.get("invests");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set invests(value: Array<string> | null) {
    if (!value) {
      this.unset("invests");
    } else {
      this.set("invests", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdraws(): Array<string> | null {
    let value = this.get("withdraws");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdraws(value: Array<string> | null) {
    if (!value) {
      this.unset("withdraws");
    } else {
      this.set("withdraws", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CreatePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("manager", Value.fromString(""));
    this.set("poolAddress", Value.fromString(""));
    this.set("poolIndex", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreatePool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CreatePool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CreatePool", id.toString(), this);
    }
  }

  static load(id: string): CreatePool | null {
    return changetype<CreatePool | null>(store.get("CreatePool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value!.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value!.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get poolIndex(): BigInt {
    let value = this.get("poolIndex");
    return value!.toBigInt();
  }

  set poolIndex(value: BigInt) {
    this.set("poolIndex", Value.fromBigInt(value));
  }
}

export class CreateNFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("NFTPoolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("manager", Value.fromString(""));
    this.set("NFTPoolAddress", Value.fromString(""));
    this.set("NFTPoolIndex", Value.fromBigInt(BigInt.zero()));
    this.set("seedPrice", Value.fromBigInt(BigInt.zero()));
    this.set("maxSupply", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreateNFTPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CreateNFTPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CreateNFTPool", id.toString(), this);
    }
  }

  static load(id: string): CreateNFTPool | null {
    return changetype<CreateNFTPool | null>(store.get("CreateNFTPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolTransaction(): string {
    let value = this.get("NFTPoolTransaction");
    return value!.toString();
  }

  set NFTPoolTransaction(value: string) {
    this.set("NFTPoolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value!.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }

  get NFTPoolIndex(): BigInt {
    let value = this.get("NFTPoolIndex");
    return value!.toBigInt();
  }

  set NFTPoolIndex(value: BigInt) {
    this.set("NFTPoolIndex", Value.fromBigInt(value));
  }

  get seedPrice(): BigInt {
    let value = this.get("seedPrice");
    return value!.toBigInt();
  }

  set seedPrice(value: BigInt) {
    this.set("seedPrice", Value.fromBigInt(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    return value!.toBigInt();
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }
}

export class InvestPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("userAddress", Value.fromString(""));
    this.set("poolAddress", Value.fromString(""));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save InvestPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("InvestPool", id.toString(), this);
    }
  }

  static load(id: string): InvestPool | null {
    return changetype<InvestPool | null>(store.get("InvestPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value!.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value!.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value!.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class InvestNFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("NFTPoolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("userAddress", Value.fromString(""));
    this.set("NFTPoolAddress", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("USDAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save InvestNFTPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save InvestNFTPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("InvestNFTPool", id.toString(), this);
    }
  }

  static load(id: string): InvestNFTPool | null {
    return changetype<InvestNFTPool | null>(store.get("InvestNFTPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolTransaction(): string {
    let value = this.get("NFTPoolTransaction");
    return value!.toString();
  }

  set NFTPoolTransaction(value: string) {
    this.set("NFTPoolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value!.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value!.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get USDAmount(): BigInt {
    let value = this.get("USDAmount");
    return value!.toBigInt();
  }

  set USDAmount(value: BigInt) {
    this.set("USDAmount", Value.fromBigInt(value));
  }
}

export class WithdrawPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("userAddress", Value.fromString(""));
    this.set("poolAddress", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("USDAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WithdrawPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WithdrawPool", id.toString(), this);
    }
  }

  static load(id: string): WithdrawPool | null {
    return changetype<WithdrawPool | null>(store.get("WithdrawPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value!.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value!.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value!.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get USDAmount(): BigInt {
    let value = this.get("USDAmount");
    return value!.toBigInt();
  }

  set USDAmount(value: BigInt) {
    this.set("USDAmount", Value.fromBigInt(value));
  }
}

export class WithdrawNFTPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("NFTPoolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("userAddress", Value.fromString(""));
    this.set("NFTPoolAddress", Value.fromString(""));
    this.set("tokenAmount", Value.fromBigInt(BigInt.zero()));
    this.set("USDAmount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawNFTPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WithdrawNFTPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WithdrawNFTPool", id.toString(), this);
    }
  }

  static load(id: string): WithdrawNFTPool | null {
    return changetype<WithdrawNFTPool | null>(store.get("WithdrawNFTPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFTPoolTransaction(): string {
    let value = this.get("NFTPoolTransaction");
    return value!.toString();
  }

  set NFTPoolTransaction(value: string) {
    this.set("NFTPoolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    return value!.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get NFTPoolAddress(): string {
    let value = this.get("NFTPoolAddress");
    return value!.toString();
  }

  set NFTPoolAddress(value: string) {
    this.set("NFTPoolAddress", Value.fromString(value));
  }

  get tokenAmount(): BigInt {
    let value = this.get("tokenAmount");
    return value!.toBigInt();
  }

  set tokenAmount(value: BigInt) {
    this.set("tokenAmount", Value.fromBigInt(value));
  }

  get USDAmount(): BigInt {
    let value = this.get("USDAmount");
    return value!.toBigInt();
  }

  set USDAmount(value: BigInt) {
    this.set("USDAmount", Value.fromBigInt(value));
  }
}

export class MintFeePool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("poolTransaction", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("managerAddress", Value.fromString(""));
    this.set("poolAddress", Value.fromString(""));
    this.set("feesMinted", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintFeePool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MintFeePool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MintFeePool", id.toString(), this);
    }
  }

  static load(id: string): MintFeePool | null {
    return changetype<MintFeePool | null>(store.get("MintFeePool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolTransaction(): string {
    let value = this.get("poolTransaction");
    return value!.toString();
  }

  set poolTransaction(value: string) {
    this.set("poolTransaction", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get managerAddress(): string {
    let value = this.get("managerAddress");
    return value!.toString();
  }

  set managerAddress(value: string) {
    this.set("managerAddress", Value.fromString(value));
  }

  get poolAddress(): string {
    let value = this.get("poolAddress");
    return value!.toString();
  }

  set poolAddress(value: string) {
    this.set("poolAddress", Value.fromString(value));
  }

  get feesMinted(): BigInt {
    let value = this.get("feesMinted");
    return value!.toBigInt();
  }

  set feesMinted(value: BigInt) {
    this.set("feesMinted", Value.fromBigInt(value));
  }
}

export class Bundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("celoPrice", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bundle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bundle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bundle", id.toString(), this);
    }
  }

  static load(id: string): Bundle | null {
    return changetype<Bundle | null>(store.get("Bundle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get celoPrice(): BigDecimal {
    let value = this.get("celoPrice");
    return value!.toBigDecimal();
  }

  set celoPrice(value: BigDecimal) {
    this.set("celoPrice", Value.fromBigDecimal(value));
  }
}

export class ManagedInvestment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("investmentAddress", Value.fromString(""));
    this.set("manager", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ManagedInvestment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ManagedInvestment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ManagedInvestment", id.toString(), this);
    }
  }

  static load(id: string): ManagedInvestment | null {
    return changetype<ManagedInvestment | null>(
      store.get("ManagedInvestment", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get investmentAddress(): string {
    let value = this.get("investmentAddress");
    return value!.toString();
  }

  set investmentAddress(value: string) {
    this.set("investmentAddress", Value.fromString(value));
  }

  get manager(): string {
    let value = this.get("manager");
    return value!.toString();
  }

  set manager(value: string) {
    this.set("manager", Value.fromString(value));
  }
}

export class TradegenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("dailyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradegenDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TradegenDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TradegenDayData", id.toString(), this);
    }
  }

  static load(id: string): TradegenDayData | null {
    return changetype<TradegenDayData | null>(store.get("TradegenDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value!.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalVolumeUSD(): BigDecimal {
    let value = this.get("totalVolumeUSD");
    return value!.toBigDecimal();
  }

  set totalVolumeUSD(value: BigDecimal) {
    this.set("totalVolumeUSD", Value.fromBigDecimal(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }
}

export class PoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hourStartUnix", Value.fromI32(0));
    this.set("pool", Value.fromString(""));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourlyTxns", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolHourData", id.toString(), this);
    }
  }

  static load(id: string): PoolHourData | null {
    return changetype<PoolHourData | null>(store.get("PoolHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value!.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get tokenPrice(): BigDecimal {
    let value = this.get("tokenPrice");
    return value!.toBigDecimal();
  }

  set tokenPrice(value: BigDecimal) {
    this.set("tokenPrice", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    return value!.toBigDecimal();
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyTxns(): BigInt {
    let value = this.get("hourlyTxns");
    return value!.toBigInt();
  }

  set hourlyTxns(value: BigInt) {
    this.set("hourlyTxns", Value.fromBigInt(value));
  }
}

export class NFTPoolHourData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("hourStartUnix", Value.fromI32(0));
    this.set("NFTPool", Value.fromString(""));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("tokenPrice", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("hourlyTxns", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTPoolHourData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPoolHourData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPoolHourData", id.toString(), this);
    }
  }

  static load(id: string): NFTPoolHourData | null {
    return changetype<NFTPoolHourData | null>(store.get("NFTPoolHourData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hourStartUnix(): i32 {
    let value = this.get("hourStartUnix");
    return value!.toI32();
  }

  set hourStartUnix(value: i32) {
    this.set("hourStartUnix", Value.fromI32(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value!.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get tokenPrice(): BigDecimal {
    let value = this.get("tokenPrice");
    return value!.toBigDecimal();
  }

  set tokenPrice(value: BigDecimal) {
    this.set("tokenPrice", Value.fromBigDecimal(value));
  }

  get hourlyVolumeUSD(): BigDecimal {
    let value = this.get("hourlyVolumeUSD");
    return value!.toBigDecimal();
  }

  set hourlyVolumeUSD(value: BigDecimal) {
    this.set("hourlyVolumeUSD", Value.fromBigDecimal(value));
  }

  get hourlyTxns(): BigInt {
    let value = this.get("hourlyTxns");
    return value!.toBigInt();
  }

  set hourlyTxns(value: BigInt) {
    this.set("hourlyTxns", Value.fromBigInt(value));
  }
}

export class PoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("pool", Value.fromString(""));
    this.set("dailyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyTxns", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PoolDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PoolDayData", id.toString(), this);
    }
  }

  static load(id: string): PoolDayData | null {
    return changetype<PoolDayData | null>(store.get("PoolDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value!.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value!.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value!.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }
}

export class NFTPoolDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("date", Value.fromI32(0));
    this.set("NFTPool", Value.fromString(""));
    this.set("dailyVolumeUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("dailyTxns", Value.fromBigInt(BigInt.zero()));
    this.set("totalValueLockedUSD", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("priceUSD", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTPoolDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTPoolDayData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTPoolDayData", id.toString(), this);
    }
  }

  static load(id: string): NFTPoolDayData | null {
    return changetype<NFTPoolDayData | null>(store.get("NFTPoolDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get NFTPool(): string {
    let value = this.get("NFTPool");
    return value!.toString();
  }

  set NFTPool(value: string) {
    this.set("NFTPool", Value.fromString(value));
  }

  get dailyVolumeUSD(): BigDecimal {
    let value = this.get("dailyVolumeUSD");
    return value!.toBigDecimal();
  }

  set dailyVolumeUSD(value: BigDecimal) {
    this.set("dailyVolumeUSD", Value.fromBigDecimal(value));
  }

  get dailyTxns(): BigInt {
    let value = this.get("dailyTxns");
    return value!.toBigInt();
  }

  set dailyTxns(value: BigInt) {
    this.set("dailyTxns", Value.fromBigInt(value));
  }

  get totalValueLockedUSD(): BigDecimal {
    let value = this.get("totalValueLockedUSD");
    return value!.toBigDecimal();
  }

  set totalValueLockedUSD(value: BigDecimal) {
    this.set("totalValueLockedUSD", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get priceUSD(): BigDecimal {
    let value = this.get("priceUSD");
    return value!.toBigDecimal();
  }

  set priceUSD(value: BigDecimal) {
    this.set("priceUSD", Value.fromBigDecimal(value));
  }
}
