// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numberOfPoolTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOfUSD(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ExecutedTransaction extends ethereum.Event {
  get params(): ExecutedTransaction__Params {
    return new ExecutedTransaction__Params(this);
  }
}

export class ExecutedTransaction__Params {
  _event: ExecutedTransaction;

  constructor(event: ExecutedTransaction) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get success(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numberOfPoolTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get valueWithdrawn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assets(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }

  get amountsWithdrawn(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class NFTPool__getAvailableTokensPerClassResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class NFTPool__getPositionsAndTotalResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<Address>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class NFTPool__getTokenBalancePerClassResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class NFTPool extends ethereum.SmartContract {
  static bind(address: Address): NFTPool {
    return new NFTPool("NFTPool", address);
  }

  ADDRESS_RESOLVER(): Address {
    let result = super.call(
      "ADDRESS_RESOLVER",
      "ADDRESS_RESOLVER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESS_RESOLVER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESS_RESOLVER",
      "ADDRESS_RESOLVER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _positionKeys(param0: BigInt): Address {
    let result = super.call(
      "_positionKeys",
      "_positionKeys(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try__positionKeys(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_positionKeys",
      "_positionKeys(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  availableC1(): BigInt {
    let result = super.call("availableC1", "availableC1():(uint256)", []);

    return result[0].toBigInt();
  }

  try_availableC1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("availableC1", "availableC1():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableC2(): BigInt {
    let result = super.call("availableC2", "availableC2():(uint256)", []);

    return result[0].toBigInt();
  }

  try_availableC2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("availableC2", "availableC2():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableC3(): BigInt {
    let result = super.call("availableC3", "availableC3():(uint256)", []);

    return result[0].toBigInt();
  }

  try_availableC3(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("availableC3", "availableC3():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableC4(): BigInt {
    let result = super.call("availableC4", "availableC4():(uint256)", []);

    return result[0].toBigInt();
  }

  try_availableC4(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("availableC4", "availableC4():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balance(param0: Address): BigInt {
    let result = super.call("balance", "balance(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  farm(): Address {
    let result = super.call("farm", "farm():(address)", []);

    return result[0].toAddress();
  }

  try_farm(): ethereum.CallResult<Address> {
    let result = super.tryCall("farm", "farm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAssetValue(asset: Address, assetHandlerAddress: Address): BigInt {
    let result = super.call(
      "getAssetValue",
      "getAssetValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(assetHandlerAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAssetValue(
    asset: Address,
    assetHandlerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetValue",
      "getAssetValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(assetHandlerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableFunds(): BigInt {
    let result = super.call(
      "getAvailableFunds",
      "getAvailableFunds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAvailableFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableFunds",
      "getAvailableFunds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableTokensPerClass(): NFTPool__getAvailableTokensPerClassResult {
    let result = super.call(
      "getAvailableTokensPerClass",
      "getAvailableTokensPerClass():(uint256,uint256,uint256,uint256)",
      []
    );

    return new NFTPool__getAvailableTokensPerClassResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getAvailableTokensPerClass(): ethereum.CallResult<
    NFTPool__getAvailableTokensPerClassResult
  > {
    let result = super.tryCall(
      "getAvailableTokensPerClass",
      "getAvailableTokensPerClass():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTPool__getAvailableTokensPerClassResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getPoolValue(): BigInt {
    let result = super.call("getPoolValue", "getPoolValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPoolValue", "getPoolValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionsAndTotal(): NFTPool__getPositionsAndTotalResult {
    let result = super.call(
      "getPositionsAndTotal",
      "getPositionsAndTotal():(address[],uint256[],uint256)",
      []
    );

    return new NFTPool__getPositionsAndTotalResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_getPositionsAndTotal(): ethereum.CallResult<
    NFTPool__getPositionsAndTotalResult
  > {
    let result = super.tryCall(
      "getPositionsAndTotal",
      "getPositionsAndTotal():(address[],uint256[],uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTPool__getPositionsAndTotalResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  getTokenBalancePerClass(
    user: Address
  ): NFTPool__getTokenBalancePerClassResult {
    let result = super.call(
      "getTokenBalancePerClass",
      "getTokenBalancePerClass(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return new NFTPool__getTokenBalancePerClassResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getTokenBalancePerClass(
    user: Address
  ): ethereum.CallResult<NFTPool__getTokenBalancePerClassResult> {
    let result = super.tryCall(
      "getTokenBalancePerClass",
      "getTokenBalancePerClass(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTPool__getTokenBalancePerClassResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getUSDBalance(user: Address): BigInt {
    let result = super.call(
      "getUSDBalance",
      "getUSDBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getUSDBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUSDBalance",
      "getUSDBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxSupply(): BigInt {
    let result = super.call("maxSupply", "maxSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxSupply", "maxSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numberOfPositions(): BigInt {
    let result = super.call(
      "numberOfPositions",
      "numberOfPositions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfPositions",
      "numberOfPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionToIndex(param0: Address): BigInt {
    let result = super.call(
      "positionToIndex",
      "positionToIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_positionToIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionToIndex",
      "positionToIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seedPrice(): BigInt {
    let result = super.call("seedPrice", "seedPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_seedPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seedPrice", "seedPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrice(): BigInt {
    let result = super.call("tokenPrice", "tokenPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(
    from: Address,
    to: Address,
    tokenClass: BigInt,
    numberOfTokens: BigInt
  ): boolean {
    let result = super.call(
      "transfer",
      "transfer(address,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenClass),
        ethereum.Value.fromUnsignedBigInt(numberOfTokens)
      ]
    );

    return result[0].toBoolean();
  }

  try_transfer(
    from: Address,
    to: Address,
    tokenClass: BigInt,
    numberOfTokens: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transfer",
      "transfer(address,address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(tokenClass),
        ethereum.Value.fromUnsignedBigInt(numberOfTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get numberOfPoolTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get poolName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get supplyCap(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get poolManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get addressResolver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveEmptyPositionsCall extends ethereum.Call {
  get inputs(): RemoveEmptyPositionsCall__Inputs {
    return new RemoveEmptyPositionsCall__Inputs(this);
  }

  get outputs(): RemoveEmptyPositionsCall__Outputs {
    return new RemoveEmptyPositionsCall__Outputs(this);
  }
}

export class RemoveEmptyPositionsCall__Inputs {
  _call: RemoveEmptyPositionsCall;

  constructor(call: RemoveEmptyPositionsCall) {
    this._call = call;
  }
}

export class RemoveEmptyPositionsCall__Outputs {
  _call: RemoveEmptyPositionsCall;

  constructor(call: RemoveEmptyPositionsCall) {
    this._call = call;
  }
}

export class SetFarmAddressCall extends ethereum.Call {
  get inputs(): SetFarmAddressCall__Inputs {
    return new SetFarmAddressCall__Inputs(this);
  }

  get outputs(): SetFarmAddressCall__Outputs {
    return new SetFarmAddressCall__Outputs(this);
  }
}

export class SetFarmAddressCall__Inputs {
  _call: SetFarmAddressCall;

  constructor(call: SetFarmAddressCall) {
    this._call = call;
  }

  get farmAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFarmAddressCall__Outputs {
  _call: SetFarmAddressCall;

  constructor(call: SetFarmAddressCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenClass(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get numberOfTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get numberOfPoolTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenClass(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
