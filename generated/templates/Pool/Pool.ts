// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExecutedTransaction extends ethereum.Event {
  get params(): ExecutedTransaction__Params {
    return new ExecutedTransaction__Params(this);
  }
}

export class ExecutedTransaction__Params {
  _event: ExecutedTransaction;

  constructor(event: ExecutedTransaction) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get success(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MintedManagerFee extends ethereum.Event {
  get params(): MintedManagerFee__Params {
    return new MintedManagerFee__Params(this);
  }
}

export class MintedManagerFee__Params {
  _event: MintedManagerFee;

  constructor(event: MintedManagerFee) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RemovedEmptyPositions extends ethereum.Event {
  get params(): RemovedEmptyPositions__Params {
    return new RemovedEmptyPositions__Params(this);
  }
}

export class RemovedEmptyPositions__Params {
  _event: RemovedEmptyPositions;

  constructor(event: RemovedEmptyPositions) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get poolAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get numberOfPoolTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get valueWithdrawn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get assets(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }

  get amountsWithdrawn(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Pool__getPositionsAndTotalResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: BigInt;

  constructor(value0: Array<Address>, value1: Array<BigInt>, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Pool extends ethereum.SmartContract {
  static bind(address: Address): Pool {
    return new Pool("Pool", address);
  }

  ADDRESS_RESOLVER(): Address {
    let result = super.call(
      "ADDRESS_RESOLVER",
      "ADDRESS_RESOLVER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESS_RESOLVER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESS_RESOLVER",
      "ADDRESS_RESOLVER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _balanceOf(param0: Address): BigInt {
    let result = super.call("_balanceOf", "_balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try__balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_balanceOf", "_balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _manager(): Address {
    let result = super.call("_manager", "_manager():(address)", []);

    return result[0].toAddress();
  }

  try__manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("_manager", "_manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _name(): string {
    let result = super.call("_name", "_name():(string)", []);

    return result[0].toString();
  }

  try__name(): ethereum.CallResult<string> {
    let result = super.tryCall("_name", "_name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  _performanceFee(): BigInt {
    let result = super.call(
      "_performanceFee",
      "_performanceFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__performanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_performanceFee",
      "_performanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _positionKeys(param0: BigInt): Address {
    let result = super.call(
      "_positionKeys",
      "_positionKeys(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try__positionKeys(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_positionKeys",
      "_positionKeys(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _tokenPriceAtLastFeeMint(): BigInt {
    let result = super.call(
      "_tokenPriceAtLastFeeMint",
      "_tokenPriceAtLastFeeMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__tokenPriceAtLastFeeMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_tokenPriceAtLastFeeMint",
      "_tokenPriceAtLastFeeMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableManagerFee(): BigInt {
    let result = super.call(
      "availableManagerFee",
      "availableManagerFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_availableManagerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableManagerFee",
      "availableManagerFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetValue(asset: Address, assetHandlerAddress: Address): BigInt {
    let result = super.call(
      "getAssetValue",
      "getAssetValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(assetHandlerAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAssetValue(
    asset: Address,
    assetHandlerAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetValue",
      "getAssetValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(asset),
        ethereum.Value.fromAddress(assetHandlerAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableFunds(): BigInt {
    let result = super.call(
      "getAvailableFunds",
      "getAvailableFunds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAvailableFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAvailableFunds",
      "getAvailableFunds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getManagerAddress(): Address {
    let result = super.call(
      "getManagerAddress",
      "getManagerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getManagerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getManagerAddress",
      "getManagerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPerformanceFee(): BigInt {
    let result = super.call(
      "getPerformanceFee",
      "getPerformanceFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPerformanceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPerformanceFee",
      "getPerformanceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolValue(): BigInt {
    let result = super.call("getPoolValue", "getPoolValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPoolValue", "getPoolValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionsAndTotal(): Pool__getPositionsAndTotalResult {
    let result = super.call(
      "getPositionsAndTotal",
      "getPositionsAndTotal():(address[],uint256[],uint256)",
      []
    );

    return new Pool__getPositionsAndTotalResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigInt()
    );
  }

  try_getPositionsAndTotal(): ethereum.CallResult<
    Pool__getPositionsAndTotalResult
  > {
    let result = super.tryCall(
      "getPositionsAndTotal",
      "getPositionsAndTotal():(address[],uint256[],uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pool__getPositionsAndTotalResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigInt()
      )
    );
  }

  getUSDBalance(user: Address): BigInt {
    let result = super.call(
      "getUSDBalance",
      "getUSDBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getUSDBalance(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUSDBalance",
      "getUSDBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numberOfPositions(): BigInt {
    let result = super.call(
      "numberOfPositions",
      "numberOfPositions():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberOfPositions(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfPositions",
      "numberOfPositions():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionToIndex(param0: Address): BigInt {
    let result = super.call(
      "positionToIndex",
      "positionToIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_positionToIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionToIndex",
      "positionToIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrice(): BigInt {
    let result = super.call("tokenPrice", "tokenPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get poolName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get performanceFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get addressResolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ExecuteTransactionCall extends ethereum.Call {
  get inputs(): ExecuteTransactionCall__Inputs {
    return new ExecuteTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteTransactionCall__Outputs {
    return new ExecuteTransactionCall__Outputs(this);
  }
}

export class ExecuteTransactionCall__Inputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteTransactionCall__Outputs {
  _call: ExecuteTransactionCall;

  constructor(call: ExecuteTransactionCall) {
    this._call = call;
  }
}

export class ExitCall extends ethereum.Call {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class MintManagerFeeCall extends ethereum.Call {
  get inputs(): MintManagerFeeCall__Inputs {
    return new MintManagerFeeCall__Inputs(this);
  }

  get outputs(): MintManagerFeeCall__Outputs {
    return new MintManagerFeeCall__Outputs(this);
  }
}

export class MintManagerFeeCall__Inputs {
  _call: MintManagerFeeCall;

  constructor(call: MintManagerFeeCall) {
    this._call = call;
  }
}

export class MintManagerFeeCall__Outputs {
  _call: MintManagerFeeCall;

  constructor(call: MintManagerFeeCall) {
    this._call = call;
  }
}

export class RemoveEmptyPositionsCall extends ethereum.Call {
  get inputs(): RemoveEmptyPositionsCall__Inputs {
    return new RemoveEmptyPositionsCall__Inputs(this);
  }

  get outputs(): RemoveEmptyPositionsCall__Outputs {
    return new RemoveEmptyPositionsCall__Outputs(this);
  }
}

export class RemoveEmptyPositionsCall__Inputs {
  _call: RemoveEmptyPositionsCall;

  constructor(call: RemoveEmptyPositionsCall) {
    this._call = call;
  }
}

export class RemoveEmptyPositionsCall__Outputs {
  _call: RemoveEmptyPositionsCall;

  constructor(call: RemoveEmptyPositionsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get numberOfPoolTokens(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
