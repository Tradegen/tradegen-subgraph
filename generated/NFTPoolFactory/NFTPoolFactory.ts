// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreatedNFTPool extends ethereum.Event {
  get params(): CreatedNFTPool__Params {
    return new CreatedNFTPool__Params(this);
  }
}

export class CreatedNFTPool__Params {
  _event: CreatedNFTPool;

  constructor(event: CreatedNFTPool) {
    this._event = event;
  }

  get managerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NFTPoolFactory extends ethereum.SmartContract {
  static bind(address: Address): NFTPoolFactory {
    return new NFTPoolFactory("NFTPoolFactory", address);
  }

  ADDRESS_RESOLVER(): Address {
    let result = super.call(
      "ADDRESS_RESOLVER",
      "ADDRESS_RESOLVER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ADDRESS_RESOLVER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESS_RESOLVER",
      "ADDRESS_RESOLVER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addressToIndex(param0: Address): BigInt {
    let result = super.call(
      "addressToIndex",
      "addressToIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_addressToIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressToIndex",
      "addressToIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailablePools(): Array<Address> {
    let result = super.call(
      "getAvailablePools",
      "getAvailablePools():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAvailablePools(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAvailablePools",
      "getAvailablePools():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getUserManagedPools(user: Address): Array<Address> {
    let result = super.call(
      "getUserManagedPools",
      "getUserManagedPools(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toAddressArray();
  }

  try_getUserManagedPools(user: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getUserManagedPools",
      "getUserManagedPools(address):(address[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  pools(param0: BigInt): Address {
    let result = super.call("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_pools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("pools", "pools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userToManagedPools(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userToManagedPools",
      "userToManagedPools(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userToManagedPools(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToManagedPools",
      "userToManagedPools(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get addressResolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get poolName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get seedPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}
