type Tradegen @entity {
  # AddressResolver contract address
  id: ID!

  # pool info
  poolCount: Int!
  NFTPoolCount: Int!

  # total volume
  totalVolumeUSD: BigDecimal!

  # total value locked
  totalValueLockedUSD: BigDecimal!

  # transactions
  txCount: BigInt!
}

type Pool @entity {
  # pool address
  id: ID!

  # mirrored from the smart contract
  name: String!
  manager: String!
  performanceFee: BigInt!
  tokenPrice: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # pool specific volume
  tradeVolumeUSD: BigDecimal!

  # total fees collected in USD
  feesCollected: BigDecimal!

  # TVL
  totalValueLockedUSD: BigDecimal!

  # derived fields
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  positions: [AssetPosition!]! @derivedFrom(field: "pool")
  trades: [Trade!]! @derivedFrom(field: "pool")
  transactions: [PoolTransaction!]! @derivedFrom(field: "pool")
}

type NFTPool @entity {
  # NFT pool address
  id: ID!

  # mirrored from the smart contract
  name: String!
  manager: String!
  maxSupply: BigInt!
  seedPrice: BigInt!
  tokenPrice: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # available tokens by class
  availableC1: BigInt!
  availableC2: BigInt!
  availableC3: BigInt!
  availableC4: BigInt!

  # pool specific volume
  tradeVolumeUSD: BigDecimal!

  # total fees collected in USD
  feesCollected: BigDecimal!

  # TVL
  totalValueLockedUSD: BigDecimal!

  # derived fields
  poolDayData: [NFTPoolDayData!]! @derivedFrom(field: "NFTPool")
  positions: [AssetPosition!]! @derivedFrom(field: "NFTPool")
  trades: [Trade!]! @derivedFrom(field: "NFTPool")
  transactions: [NFTPoolTransaction!]! @derivedFrom(field: "NFTPool")
}

type PoolLookup @entity {
  id: ID!
  poolAddress: Pool!
}

type NFTPoolLookup @entity {
  id: ID!
  NFTPoolAddress: NFTPool!
}

type User @entity {
  id: ID!
  poolPositions: [PoolPosition!]! @derivedFrom(field: "user")
  NFTPoolPositions: [NFTPoolPosition!]! @derivedFrom(field: "user")
  managedInvestments: [ManagedInvestment!]! @derivedFrom(field: "manager")
  feesEarned: BigDecimal!
  feesPaid: BigDecimal!
}

type PoolPosition @entity {
  id: ID!
  user: User!
  pool: Pool!
  tokenBalance: BigInt!
  averagePrice: BigInt!
}

type NFTPoolPosition @entity {
  id: ID!
  user: User!
  NFTPool: NFTPool!
  tokenBalance: BigInt!
  averagePrice: BigInt!
}

type AssetPosition @entity {
  id: ID!
  pool: Pool
  NFTPool: NFTPool
  tokenAddress: String!
  tokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type PoolPositionSnapshot @entity {
  id: ID!
  poolPosition: PoolPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pool: Pool! # reference to pool
  tokenPrice: BigInt! # snapshot of token price
  totalSupply: BigInt! # snapshot of total supply
  tokenBalance: BigInt! # snapshot of users token balance
}

# saved over time for return calculations, gets created and never updated
type NFTPoolPositionSnapshot @entity {
  id: ID!
  NFTPoolPosition: NFTPoolPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  NFTPool: NFTPool! # reference to NFT pool
  tokenPrice: BigInt! # snapshot of token price
  totalSupply: BigInt! # snapshot of total supply
  tokenBalance: BigInt! # snapshot of users token balance
}

type Trade @entity {
  # transaction hash + "-" + index in trades array
  id: ID!
  pool: Pool
  NFTPool: NFTPool

  swap: Swap
  addLiquiditys: AddLiquidity
  removeLiquiditys: RemoveLiquidity
  stakes: Stake
  unstakes: Unstake
}

type Swap @entity {
  # Trade ID + "-" + index in swaps array
  id: ID!
  trade: Trade!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  investmentAddress: String!
  fromAsset: String!
  toAsset: String!
  amountSwapped: BigInt! # amount of source asset tokens
}

type AddLiquidity @entity {
  # Trade ID + "-" + index in addLiquiditys array
  id: ID!
  trade: Trade!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  investmentAddress: String!
  tokenA: String!
  tokenB: String!
  amountA: BigInt!
  amountB: BigInt!
}

type RemoveLiquidity @entity {
  # Trade ID + "-" + index in removeLiquiditys array
  id: ID!
  trade: Trade!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  investmentAddress: String!
  tokenA: String!
  tokenB: String!
  numberOfLPTokens: BigInt!
}

type Stake @entity {
  # Trade ID + "-" + index in stakes array
  id: ID!
  trade: Trade!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  investmentAddress: String!
  stakedToken: String!
  amount: BigInt!
}

type Unstake @entity {
  # Trade ID + "-" + index in unstakes array
  id: ID!
  trade: Trade!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  investmentAddress: String!
  stakedToken: String!
  amount: BigInt!
}

type PoolTransaction @entity {
  # transaction hash + "-" + index in transactions array
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  pool: Pool!
  creates: CreatePool
  invests: InvestPool
  withdraws: WithdrawPool
  mintFees: MintFeePool
}

type NFTPoolTransaction @entity {
  # transaction hash + "-" + index in transactions array
  id: ID!
  blockNumber: BigInt!
  timestamp: BigInt!
  NFTPool: NFTPool!
  creates: CreatePool
  invests: InvestPool
  withdraws: WithdrawPool
}

type CreatePool @entity {
  # PoolTransaction ID + "-" + index in creates PoolTransaction array
  id: ID!
  poolTransaction: PoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  manager: String!
  poolAddress: String!
  poolIndex: BigInt! # index in PoolFactory pools array
}

type CreateNFTPool @entity {
  # NFTPoolTransaction ID + "-" + index in creates NFTPoolTransaction array
  id: ID!
  NFTPoolTransaction: NFTPoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  manager: String!
  NFTPoolAddress: String!
  NFTPoolIndex: BigInt! # index in NFTPoolFactory pools array
  
  seedPrice: BigInt!
  maxSupply: BigInt!
}

type InvestPool @entity {
  # PoolTransaction ID + "-" + index in invests PoolTransaction array
  id: ID!
  poolTransaction: PoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  userAddress: String!
  poolAddress: String!
  amount: BigInt! # USD amount invested
}

type InvestNFTPool @entity {
  # NFTPoolTransaction ID + "-" + index in invests NFTPoolTransaction array
  id: ID!
  NFTPoolTransaction: NFTPoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  userAddress: String!
  NFTPoolAddress: String!
  tokenAmount: BigInt! # number of tokens purchased
  USDAmount: BigInt! # amount of USD invested
}

type WithdrawPool @entity {
  # PoolTransaction ID + "-" + index in withdraws PoolTransaction array
  id: ID!
  poolTransaction: PoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  userAddress: String!
  poolAddress: String!
  tokenAmount: BigInt! # number of pool tokens withdrawn
  USDAmount: BigInt! # amount of USD withdrawn
}

type WithdrawNFTPool @entity {
  # NFTPoolTransaction ID + "-" + index in withdraws NFTPoolTransaction array
  id: ID!
  NFTPoolTransaction: NFTPoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  userAddress: String!
  NFTPoolAddress: String!
  tokenAmount: BigInt! # number of NFT pool tokens withdrawn
  USDAmount: BigInt! # amount of USD withdrawn
}

type MintFeePool @entity {
  # PoolTransaction ID + "-" + index in mintFees PoolTransaction array
  id: ID!
  poolTransaction: PoolTransaction!
  timestamp: BigInt! # need this to pull recent txns for specific pool or NFT pool

  managerAddress: String!
  poolAddress: String!
  feesMinted: BigInt! # number of pool tokens minted as performance fee
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  celoPrice: BigDecimal! # price of Celo-cUSD
}

type ManagedInvestment @entity {
  id: ID!
  pool: Pool
  NFTPool: NFTPool
  manager: User! # address of investment's manager
}

# Data accumulated and condensed into day stats for all of Tradegen
type TradegenDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeUSD: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalValueLockedUSD: BigDecimal!

  txCount: BigInt!
}

type PoolHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  pool: Pool!

  totalSupply: BigInt!
  tokenPrice: BigInt!
  totalValueLockedUSD: BigDecimal!

  # volume stats
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

type NFTPoolHourData @entity {
  id: ID!
  hourStartUnix: Int! # unix timestamp for start of hour
  NFTPool: NFTPool!

  totalSupply: BigInt!
  tokenPrice: BigInt!
  totalValueLockedUSD: BigDecimal!

  # volume stats
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!
}

type PoolDayData @entity {
  id: ID!
  date: Int!
  pool: Pool!

  # volume stats
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # TVL stats
  totalValueLockedUSD: BigDecimal!
  totalSupply: BigInt!

  # price stats
  priceUSD: BigInt!
}

type NFTPoolDayData @entity {
  id: ID!
  date: Int!
  NFTPool: NFTPool!

  # volume stats
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # TVL stats
  totalValueLockedUSD: BigDecimal!
  totalSupply: BigInt!

  # price stats
  priceUSD: BigInt!
}
